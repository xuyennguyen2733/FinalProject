#version 410 core

layout(quads, equal_spacing, ccw) in;

//in vec3 norm[];
//in vec2 txc[];
//in vec3 worldView[];
//in mat3 mn[];

//out vec3 norms;
//out vec2 texCoord;
//out vec3 view;
//out mat3 matrixNormal;


void main() {
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    
    vec4 pos0 = gl_in[0].gl_Position;
    vec4 pos1 = gl_in[1].gl_Position;
    vec4 pos2 = gl_in[2].gl_Position;
    vec4 pos3 = gl_in[3].gl_Position;

    vec4 leftPos = pos1 + v * (pos3 - pos1);
    vec4 rightPos = pos0 + v * (pos2 - pos0);
    vec4 pos = leftPos + u * (rightPos - leftPos);

    /*vec2 tex0 = txc[0];
    vec2 tex1 = txc[1];
    vec2 tex2 = txc[2];
    vec2 tex3 = txc[3];

    vec2 leftTex = tex3 + v * (tex1 - tex3);
    vec2 rightTex = tex2 + v * (tex0 - tex2);
    vec2 tex = leftTex + u * (rightTex - leftTex);

    vec3 w0 = worldView[0];
    vec3 w1 = worldView[1];
    vec3 w2 = worldView[2];
    vec3 w3 = worldView[3];

    vec3 leftWorldView = w1 + v * (w3 - w1);
    vec3 rightWorldView = w0 + v * (w2 - w0);
    vec3 WV = leftWorldView + u * (rightWorldView - leftWorldView);
    
    vec3 n0 = norm[0];
    vec3 n1 = norm[1];
    vec3 n2 = norm[2];
    vec3 n3 = norm[3];

    vec3 leftNorm = w1 + v * (w3 - w1);
    vec3 rightNorm = w0 + v * (w2 - w0);
    vec3 outNorm = leftNorm + u * (rightNorm - leftNorm);*/

    gl_Position = pos;
    //norms = outNorm;
    //texCoord = tex;
    //view = WV;
    //matrixNormal = mn[0];

}