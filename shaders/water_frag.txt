#version 330 core

layout(location=0) out vec4 color;

uniform sampler2D waterTexID;
uniform sampler2D normalMap;
uniform samplerCube cubemap;
uniform vec3 cameraPos;
uniform mat4 modelMatrix;
uniform vec3 light;

in vec2 texCoord;
in vec3 norms;
in vec3 view;
in mat3 matrixNormal;
in vec3 position;
vec3 lightDir = light;

void main() 
{
	vec3 worldVertexPosition = vec3(modelMatrix * vec4(position,1.0));
	vec3 incident = -normalize(worldVertexPosition);

	float shininess = 2.0; 
	float ratio = 1.00 / 1.52;

	vec4 I = vec4(1.0,1.0,1.0,1.0);
	vec3 l = normalize(lightDir);
	vec3 plane_n = normalize(matrixNormal * norms);
	vec3 n = normalize(matrixNormal*((texture(normalMap, texCoord).xyz * 2.0f - 1.0f)));
	vec3 v = -normalize(vec3(view));
	vec3 h = normalize(l+v);

	vec3 refl = reflect(incident,plane_n);
	vec3 refr = refract(v,plane_n, ratio);

	float theta = max(dot(l,n),0.0);
	float phi = pow(max(dot(n,h),0.0),shininess);

	vec4 Kd = texture(waterTexID,texCoord);
	vec4 Ks = texture(waterTexID,texCoord);

	vec4 ambient = texture(waterTexID, texCoord) * 0.8;
	vec4 specular = Ks * phi;
	vec4 diffuse = Kd * theta;

	//color = (diffuse + ambient) * texture(cubemap,ref) + specular;
	//color = vec4(0,0,1,1) + ambient;
	//color = vec4(0,0,1,1) + texture(cubemap, -worldRefl) + texture(cubemap,refr);

	color = texture(waterTexID, texCoord)*0.5 + texture(cubemap, refl) * 0.4;
	//color = specular + diffuse;
	//color = texture(waterTexID, texCoord);
}