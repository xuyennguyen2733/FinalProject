#version 330 core

layout(location=0) out vec4 color;

uniform sampler2D waterTexID;
uniform sampler2D normalMap;
uniform samplerCube cubemap;
uniform sampler2D text;
uniform vec3 cameraPos;
uniform mat4 modelMatrix;
uniform vec3 light;
uniform mat4 texCoordMvp;
uniform mat4 lightMatrix;
uniform bool isTransparent;
uniform bool isReflective;

in vec2 texCoord;
in vec2 oldTexCoord;
in vec3 norms;
in vec3 view;
in mat3 matrixNormal;
in vec4 position;
vec3 lightDir = light;

void main() 
{
	vec3 lightPosition = vec3(lightMatrix) * lightDir;
	vec3 worldVertexPosition = vec3(modelMatrix * position);
	vec3 incident = -normalize(worldVertexPosition - cameraPos);
	vec2 ndc = position.xy/position.w;

	ndc *= 0.5;
	ndc.x += 0.5f;
	ndc.y += 0.5f;
	vec4 texTrans = modelMatrix * vec4(oldTexCoord,1,1);

	float shininess = 10.0; 
	float ratio = 1.00 / 1.52;

	vec4 I = vec4(1.0,1.0,1.0,1.0);
	vec3 l = normalize(lightPosition);
	vec3 plane_n = normalize(matrixNormal * norms);
	//vec3 n = normalize(matrixNormal*((texture(normalMap, texCoord).xyz * 2.0f - 1.0f)));
	vec3 n = normalize(matrixNormal * norms);
	vec3 v = -normalize(vec3(view));
	vec3 h = normalize(l+v);

	vec3 refl = reflect(incident,plane_n);
	vec3 refr = refract(incident,plane_n, ratio);

	float theta = max(dot(l,n),0.0);
	float phi = pow(max(dot(n,h),0.0),shininess);

	vec4 Kd = texture(waterTexID,texCoord) * 0.5;
	vec4 Ks = texture(waterTexID,texCoord) * 0.5;
	//vec4 Kd = vec4(0,0,1,0.5);
	//vec4 Ks = vec4(1,1,1,0.5);

	vec4 ambient = texture(waterTexID, texCoord) * 0.8;
	vec4 specular = Ks * phi;
	vec4 diffuse = Kd * theta;

	//color =  diffuse + specular + texture(text,oldTexCoord) * 1 + texture(cubemap, refl) * 0.6 ;
	color = diffuse + specular;
	if (isTransparent) {
		color += texture(text,vec2(ndc))*0.5;
	}
	if (isReflective) {
		color += texture(cubemap, refl) * 0.5 ;
	}
}